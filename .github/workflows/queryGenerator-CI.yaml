name: Lint, Build & Release (auto-tag)

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write   # needed to push tags & create releases

jobs:
  lint-build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Lint (gofmt + vet)
        run: |
          set -e
          fmt_out=$(gofmt -l .)
          if [ -n "$fmt_out" ]; then
            echo "The following files need gofmt:"
            echo "$fmt_out"
            exit 1
          fi
          go vet ./...

      - name: Build cross-platform binaries
        env:
          CGO_ENABLED: 0
        run: |
          set -e
          mkdir -p dist
          APP_NAME="querygen"   # <-- change if your binary name differs
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              ext=""
              [ "$os" = "windows" ] && ext=".exe"
              GOOS=$os GOARCH=$arch go build -ldflags "-s -w" -trimpath -o "dist/${APP_NAME}-${os}-${arch}${ext}" .
            done
          done
          ls -lh dist

      - name: Upload build artifacts (for this run)
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ github.run_number }}
          path: dist/*

      - name: Compute tag
        id: tag
        run: echo "TAG=v0.0.${GITHUB_RUN_NUMBER}" >> "$GITHUB_ENV"

      - name: Create and push git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "$TAG" -m "Auto tag $TAG"
          git push origin "$TAG"

      - name: Create GitHub Release & upload binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          generate_release_notes: true
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

