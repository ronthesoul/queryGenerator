name: Lint, Build, Tag & Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write   # needed for tagging & releases on push
  actions: read

env:
  APP_NAME: querygen
  GO_VERSION: "1.23"
  CGO_ENABLED: "0"

jobs:
  ci:
    name: Lint & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # Auto-format source (keeps PRs green). If you prefer failing instead,
      # replace this step with a "gofmt -l" check and exit 1 when needed.
      - name: Format (gofmt)
        run: gofmt -s -w .

      # Optionally auto-commit formatting changes on "push" (not on PRs)
      - name: Auto-commit formatting (push only)
        if: github.event_name == 'push'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): gofmt auto-fix"
          file_pattern: "*.go"

      - name: Vet
        run: go vet ./...

      - name: Build cross-platform binaries
        run: |
          set -e
          mkdir -p dist
          for os in linux darwin windows; do
            for arch in amd64 arm64; do
              ext=""
              [ "$os" = "windows" ] && ext=".exe"
              GOOS=$os GOARCH=$arch CGO_ENABLED=${CGO_ENABLED} \
                go build -ldflags "-s -w" -trimpath -o "dist/${{ env.APP_NAME }}-${os}-${arch}${ext}" .
            done
          done
          ls -lh dist

      - name: Upload artifacts (CI run)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-binaries-${{ github.run_number }}
          path: dist/*

  release:
    name: Tag & Release (push to main)
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-binaries-${{ github.run_number }}
          path: dist

      - name: Compute tag
        id: ver
        run: echo "TAG=v0.0.${GITHUB_RUN_NUMBER}" >> "$GITHUB_ENV"

      - name: Create and push git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a "$TAG" -m "Auto tag $TAG"
          git push origin "$TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          generate_release_notes: true
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
